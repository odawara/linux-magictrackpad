From 23240b3597543324db31b824b05670430b848266 Mon Sep 17 00:00:00 2001
From: Atsushi Odawara <a.odawara@gmail.com>
Date: Sat, 16 Oct 2010 01:46:11 +0900
Subject: [PATCH] add MagicTrackpad code

---
 drivers/hid/Kconfig          |    9 +++++
 drivers/hid/Makefile         |    1 +
 drivers/hid/hid-core.c       |    1 +
 drivers/hid/hid-ids.h        |    1 +
 drivers/hid/hid-magicmouse.c |   78 ++++++++++++++++++++++++++++++++++++++---
 5 files changed, 84 insertions(+), 6 deletions(-)

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 4340993..8bcf6d2 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -230,6 +230,15 @@ config HID_MAGICMOUSE
 	Say Y here if you want support for the multi-touch features of the
 	Apple Wireless "Magic" Mouse.
 
+config HID_MAGICTRACKPAD
+	tristate "Apple MagicTrackpad multi-touch support"
+	depends on BT_HIDP
+	---help---
+	Support for the Apple Magic Trackpad multi-touch.
+
+	Say Y here if you want support for the multi-touch features of the
+	Apple Wireless "Magic" Trackpad.
+
 config HID_MICROSOFT
 	tristate "Microsoft" if EMBEDDED
 	depends on USB_HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 987fa06..2a19e54 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -38,6 +38,7 @@ obj-$(CONFIG_HID_KENSINGTON)	+= hid-kensington.o
 obj-$(CONFIG_HID_KYE)		+= hid-kye.o
 obj-$(CONFIG_HID_LOGITECH)	+= hid-logitech.o
 obj-$(CONFIG_HID_MAGICMOUSE)    += hid-magicmouse.o
+obj-$(CONFIG_HID_MAGICTRACKPAD) += hid-magictrackpad.o
 obj-$(CONFIG_HID_MICROSOFT)	+= hid-microsoft.o
 obj-$(CONFIG_HID_MONTEREY)	+= hid-monterey.o
 obj-$(CONFIG_HID_MOSART)	+= hid-mosart.o
diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index 866e54e..79fc152 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@ -1243,6 +1243,7 @@ static const struct hid_device_id hid_blacklist[] = {
 	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_IRCONTROL4) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MIGHTYMOUSE) },
 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MAGICMOUSE) },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MAGICTRACKPAD) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_FOUNTAIN_ANSI) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_FOUNTAIN_ISO) },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_GEYSER_ANSI) },
diff --git a/drivers/hid/hid-ids.h b/drivers/hid/hid-ids.h
index 31601ee..631d902 100644
--- a/drivers/hid/hid-ids.h
+++ b/drivers/hid/hid-ids.h
@@ -61,6 +61,7 @@
 #define USB_VENDOR_ID_APPLE		0x05ac
 #define USB_DEVICE_ID_APPLE_MIGHTYMOUSE	0x0304
 #define USB_DEVICE_ID_APPLE_MAGICMOUSE	0x030d
+#define USB_DEVICE_ID_APPLE_MAGICTRACKPAD	0x030e
 #define USB_DEVICE_ID_APPLE_FOUNTAIN_ANSI	0x020e
 #define USB_DEVICE_ID_APPLE_FOUNTAIN_ISO	0x020f
 #define USB_DEVICE_ID_APPLE_GEYSER_ANSI	0x0214
diff --git a/drivers/hid/hid-magicmouse.c b/drivers/hid/hid-magicmouse.c
index f10d56a..cd16ad9 100644
--- a/drivers/hid/hid-magicmouse.c
+++ b/drivers/hid/hid-magicmouse.c
@@ -2,6 +2,7 @@
  *   Apple "Magic" Wireless Mouse driver
  *
  *   Copyright (c) 2010 Michael Poole <mdpoole@troilus.org>
+ *   Copyright (c) 2010 Atsushi Odawara <a.odawara@gmail.com>
  */
 
 /*
@@ -38,7 +39,8 @@ static bool report_undeciphered;
 module_param(report_undeciphered, bool, 0644);
 MODULE_PARM_DESC(report_undeciphered, "Report undeciphered multi-touch state field using a MSC_RAW event");
 
-#define TOUCH_REPORT_ID   0x29
+#define MOUSE_TOUCH_REPORT_ID      0x29
+#define TRACKPAD_TOUCH_REPORT_ID   0x28
 /* These definitions are not precise, but they're close enough.  (Bits
  * 0x03 seem to indicate the aspect ratio of the touch, bits 0x70 seem
  * to be some kind of bit mask -- 0x20 may be a near-field reading,
@@ -74,6 +76,8 @@ struct magicmouse_sc {
 	int ntouches;
 	int scroll_accel;
 	unsigned long scroll_jiffies;
+	u8 last_x;
+	u8 last_y;
 
 	struct {
 		short x;
@@ -216,6 +220,9 @@ static int magicmouse_raw_event(struct hid_device *hdev,
 	struct magicmouse_sc *msc = hid_get_drvdata(hdev);
 	struct input_dev *input = msc->input;
 	int x, y, ts, ii, clicks;
+	int finger;
+	int step;
+	unsigned long now = jiffies;
 
 	switch (data[0]) {
 	case 0x10:
@@ -225,7 +232,7 @@ static int magicmouse_raw_event(struct hid_device *hdev,
 		y = (__s16)(data[4] | data[5] << 8);
 		clicks = data[1];
 		break;
-	case TOUCH_REPORT_ID:
+	case MOUSE_TOUCH_REPORT_ID:
 		/* Expect six bytes of prefix, and N*8 bytes of touch data. */
 		if (size < 6 || ((size - 6) % 8) != 0)
 			return 0;
@@ -242,6 +249,59 @@ static int magicmouse_raw_event(struct hid_device *hdev,
 		x = (signed char)data[1];
 		y = (signed char)data[2];
 		clicks = data[3];
+
+		magicmouse_emit_buttons(msc, clicks & 3);
+		input_report_rel(input, REL_X, x);
+		input_report_rel(input, REL_Y, y);
+
+		break;
+	case TRACKPAD_TOUCH_REPORT_ID:
+                /* Count finger */
+                finger = (size -4 ) / 9;
+
+                x = ((((int)(data[5] & 0x1f)<<8) | (int)data[4]) >> 5) ;
+                y = (int)data[6];
+                x = x - (int)msc->last_x;
+                y = y - (int)msc->last_y;
+                if(x>128) x-=256;
+                if(x<-128) x+=256;
+                if(y>128) y-=256;
+                if(y<-128) y+=256;
+                msc->last_x = (((int)(data[5] & 0x1f)<<8) | (int)data[4]) >> 5;
+                msc->last_y = (int)data[6];
+
+                clicks = data[1] & 0x01;
+
+                x =  3 * x;
+                y = -1 * y;
+
+                input_report_rel(input, REL_WHEEL, 0);
+                if(finger == 3 && (x > 2 || x < -2)){                           // Swipe
+                        if(x > 1){
+                                input_report_key(input, BTN_EXTRA, 1);
+                        }else{
+                                input_report_key(input, BTN_SIDE, 1);
+                        }
+                }else if(finger == 2 && x < 4 && x > -4 && y != 0){             // Scroll
+                        step = 0;
+                        if (time_after(now, msc->scroll_jiffies + HZ / 50)){
+                                if(y >= 1) step = -1;
+                                else step = 1;
+                                msc->scroll_jiffies = now;
+                        }
+
+                        input_report_rel(input, REL_WHEEL, step);
+                }else if(finger == 2 && clicks == 1){           // Right click
+                        magicmouse_emit_buttons(msc, 2);
+                }else if(x < 50 && y < 50 && x > -50 && y > -50){               // Point
+                        magicmouse_emit_buttons(msc, clicks & 3);
+                        input_report_rel(input, REL_X, x);
+                        input_report_rel(input, REL_Y, y);
+                }else{
+                        magicmouse_emit_buttons(msc, clicks & 3);
+                        input_report_key(input, BTN_EXTRA, 0);
+                        input_report_key(input, BTN_SIDE, 0);
+                }
 		break;
 	case 0x20: /* Theoretically battery status (0-100), but I have
 		    * never seen it -- maybe it is only upon request.
@@ -254,9 +314,6 @@ static int magicmouse_raw_event(struct hid_device *hdev,
 		return 0;
 	}
 
-	magicmouse_emit_buttons(msc, clicks & 3);
-	input_report_rel(input, REL_X, x);
-	input_report_rel(input, REL_Y, y);
 	input_sync(input);
 	return 1;
 }
@@ -298,6 +355,8 @@ static void magicmouse_setup_input(struct input_dev *input, struct hid_device *h
 		__set_bit(BTN_MIDDLE, input->keybit);
 	__set_bit(BTN_TOOL_FINGER, input->keybit);
 
+        __set_bit(BTN_SIDE, input->keybit);
+        __set_bit(BTN_EXTRA, input->keybit);
 	__set_bit(EV_REL, input->evbit);
 	__set_bit(REL_X, input->relbit);
 	__set_bit(REL_Y, input->relbit);
@@ -346,6 +405,7 @@ static int magicmouse_probe(struct hid_device *hdev,
 	}
 
 	msc->quirks = id->driver_data;
+        msc->scroll_jiffies = jiffies;
 	hid_set_drvdata(hdev, msc);
 
 	ret = hid_parse(hdev);
@@ -363,7 +423,11 @@ static int magicmouse_probe(struct hid_device *hdev,
 	/* we are handling the input ourselves */
 	hidinput_disconnect(hdev);
 
-	report = hid_register_report(hdev, HID_INPUT_REPORT, TOUCH_REPORT_ID);
+        if (id->product == USB_DEVICE_ID_APPLE_MAGICMOUSE) {
+		report = hid_register_report(hdev, HID_INPUT_REPORT, MOUSE_TOUCH_REPORT_ID);
+	} else {
+		report = hid_register_report(hdev, HID_INPUT_REPORT, TRACKPAD_TOUCH_REPORT_ID);
+	}
 	if (!report) {
 		dev_err(&hdev->dev, "unable to register touch report\n");
 		ret = -ENOMEM;
@@ -423,6 +487,8 @@ static void magicmouse_remove(struct hid_device *hdev)
 static const struct hid_device_id magic_mice[] = {
 	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MAGICMOUSE),
 		.driver_data = 0 },
+	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MAGICTRACKPAD),
+		.driver_data = 0 },
 	{ }
 };
 MODULE_DEVICE_TABLE(hid, magic_mice);
-- 
1.7.1

